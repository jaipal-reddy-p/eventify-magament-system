package com.example.demo.controller;

import com.example.demo.model.Event;
import com.example.demo.model.User;
import com.example.demo.service.EventService;
import com.example.demo.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.security.Principal;
import java.util.List;

/**
 * Controller to handle event creation, retrieval, and deletion.
 */
@RestController
@RequestMapping("/api/events")
@CrossOrigin(origins = "http://localhost:5173", allowCredentials = "true")
public class EventController {

    @Autowired
    private EventService eventService;

    @Autowired
    private UserService userService;

    /**
     * Organizer creates a new event.
     * Token must belong to a user with ORGANIZER role.
     */
    @PostMapping
    @PreAuthorize("hasRole('ORGANIZER')")
    public ResponseEntity<Event> createEvent(@RequestBody Event event, Principal principal) {
        // Get organizer from token
        String email = principal.getName();
        User organizer = userService.getUserByEmail(email);

        event.setOrganizer(organizer); // Set authenticated organizer
        Event created = eventService.createEvent(event);
        return ResponseEntity.ok(created);
    }

    /**
     * Get all available events.
     */
    @GetMapping
    public List<Event> getAllEvents() {
        System.out.println("\uD83D\uDD0D getAllEvents() called");
        return eventService.getAllEvents();
    }

    /**
     * Get events posted by a specific organizer.
     */
    @GetMapping("/organizer/{id}")
    public List<Event> getByOrganizer(@PathVariable Long id) {
        return eventService.getEventsByOrganizerId(id);
    }

    /**
     * Delete an event by ID.
     * You may protect this further using @PreAuthorize.
     */
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ORGANIZER')") // Optional: only organizers can delete
    public ResponseEntity<String> delete(@PathVariable Long id) {
        eventService.deleteEvent(id);
        return ResponseEntity.ok("Event deleted");
    }
}
